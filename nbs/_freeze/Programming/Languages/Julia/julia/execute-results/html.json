{
  "hash": "8253cfcc50aa11dc6e8868fc490f90f4",
  "result": {
    "markdown": "---\ntitle: Julia\nsubtitle: Julia language\nabout:\n  template: marquee\n  image: ../../../images/gradientv12.jpg\n  links:\n    - icon: twitter\n      text: twitter\n      href: 'https://twitter.com'\n    - icon: github\n      text: Github\n      href: 'https://github.com'\nlisting:\n  sort: date desc\n  contents: posts\n  sort-ui: false\n  filter-ui: false\n  categories: true\n  feed: true\nformat:\n  html:\n    code-fold: true\nexecute:\n  cache: true\n  freeze: true\npage-layout: full\n---\n\n## Einstein Summation in Julia\n\n![](../../../images/code3.png)\n\nHere is the newest einsum call [OMEinsum.jl](https://github.com/under-Peter/OMEinsum.jl) package in Julia. It's implement using about 20 lines of Julia code! Amazing.\n\n## Einsum\n\n### Diagonal matrix\n\nreturn only the diagonal value of a square matrix and all other values in the matrix are 0 $$\n\\forall i,j \\in \\{1, 2, \\ldots, n\\}, i \\ne j \\implies d_{i,j} = 0\n$$\n\n\n````{=html}\n<!-- ```{julia}\nusing OMEinsum, LinearAlgebra,SymEngine\nfish = fill(Basic(:🐟), 2, 3, 2)\n``` -->\n````\n\n\n``` julia\nein\"->ii\"(asarray(snake[1,1]), size_info=Dict('i'=>5))\n```\n\n<!-- 12A0366C:julia_einsum.ipynb#diagonal_mat |  | echo:false,warning:false,asis:true,eval:false -->\n\n::: {layout-ncol=\"2\"}\n### List One\n\n-   Item A\n-   Item B\n-   Item C\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur gravida eu erat et fring. Morbi congue augue vel eros ullamcorper, eget convallis tortor sagittis. Fusce sodales viverra mauris a fringilla. Donec feugiat, justo eu blandit placerat, enim dui volutpat turpis, eu dictum lectus urna eu urna. Mauris sed massa ornare, interdum ipsum a, semper massa.\n\n### List Two\n\n-   Item X\n-   Item Y\n-   Item Z\n:::\n\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 12      | 12   |    12 |   12   |\n| 123     | 123  |   123 |  123   |\n| 1       | 1    |     1 |   1    |\n\n: Demonstration of pipe table syntax\n\n| fruit  | price |\n|--------|------:|\n| apple  |  2.05 |\n| pear   |  1.37 |\n| orange |  3.09 |\n\n: Fruit prices {tbl-colwidths=\"\\[75,25\\]\"}\n\n::: {#tbl-panel layout-ncol=\"2\"}\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: First Table {#tbl-first}\n\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| A    | B    | C    |\n| E    | F    | G    |\n| A    | G    | G    |\n\n: Second Table {#tbl-second}\n\nMain Caption\n:::\n\nSee @tbl-panel for details, especially @tbl-second.\n\n------------------------------------------------------------------------\n\n\n```{python}\n#| label: tbl-planet-measures\n#| tbl-cap: Planets\n\nfrom IPython.display import Markdown\nfrom tabulate import tabulate\ntable = [[\"Sun\",696000,1989100000],\n         [\"Earth\",6371,5973.6],\n         [\"Moon\",1737,73.5],\n         [\"Mars\",3390,641.85]]\nMarkdown(tabulate(\n  table, \n  headers=[\"Planet\",\"R (km)\", \"mass (x 10^29 kg)\"]\n))\n```\n\n\n+---------------+---------------+----------------------+\n| Fruit         | Price         | Advantages           |\n+===============+===============+======================+\n| Bananas       | \\$1.34        | -   built-in wrapper |\n|               |               | -   bright color     |\n+---------------+---------------+----------------------+\n| Oranges       | \\$2.10        | -   cures scurvy     |\n|               |               | -   tasty            |\n+---------------+---------------+----------------------+\n\n: Sample grid table.\n\n#### Mermaid diagram\n\n```{mermaid}\nflowchart LR\n  A[Hard edge] --> B(Round edge)\n  B --> C{Decision}\n  C --> D[Result one]\n  C --> E[Result two]\n```\n\n\n#### Graphviz \n\n\n```{dot}\ngraph G {\n  layout=neato\n  run -- intr;\n  intr -- runbl;\n  runbl -- run;\n  run -- kernel;\n  kernel -- zombie;\n  kernel -- sleep;\n  kernel -- runmem;\n  sleep -- swap;\n  swap -- runswap;\n  runswap -- new;\n  runswap -- runmem;\n  new -- runmem;\n  sleep -- runmem;\n}\n```\n\n",
    "supporting": [
      "julia_files"
    ],
    "filters": [],
    "includes": {}
  }
}