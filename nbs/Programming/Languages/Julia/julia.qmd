---
title: Julia
subtitle: Julia language
about:
  template: marquee
  image: ../../../images/gradientv12.jpg 
  links:
    - icon: twitter
      text: twitter
      href: https://twitter.com
    - icon: github
      text: Github
      href: https://github.com
listing:
  sort: "date desc"
  contents: "posts"
  sort-ui: false
  filter-ui: false
  categories: true
  feed: true
format:
  html:
    code-fold: true
execute: 
  cache: true
  freeze: true

jupyter: julia-1.9

page-layout: full
---

## Einstein Summation in Julia

![](../../../images/code3.png)

Here is the newest einsum call [OMEinsum.jl](https://github.com/under-Peter/OMEinsum.jl) package in Julia. It's implement using about 20 lines of Julia code! Amazing.

## Einsum

### Diagonal matrix

return only the diagonal value of a square matrix and all other values in the matrix are 0 $$
\forall i,j \in \{1, 2, \ldots, n\}, i \ne j \implies d_{i,j} = 0
$$

````{=html}
<!-- ```{julia}
using OMEinsum, LinearAlgebra,SymEngine
fish = fill(Basic(:🐟), 2, 3, 2)
``` -->
````

``` julia
ein"->ii"(asarray(snake[1,1]), size_info=Dict('i'=>5))
```

{{< embed julia_einsum.ipynb#diagonal_mat >}}

::: {layout-ncol="2"}
### List One

-   Item A
-   Item B
-   Item C

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur gravida eu erat et fring. Morbi congue augue vel eros ullamcorper, eget convallis tortor sagittis. Fusce sodales viverra mauris a fringilla. Donec feugiat, justo eu blandit placerat, enim dui volutpat turpis, eu dictum lectus urna eu urna. Mauris sed massa ornare, interdum ipsum a, semper massa.

### List Two

-   Item X
-   Item Y
-   Item Z
:::

| Default | Left | Right | Center |
|---------|:-----|------:|:------:|
| 12      | 12   |    12 |   12   |
| 123     | 123  |   123 |  123   |
| 1       | 1    |     1 |   1    |

: Demonstration of pipe table syntax

| fruit  | price |
|--------|------:|
| apple  |  2.05 |
| pear   |  1.37 |
| orange |  3.09 |

: Fruit prices {tbl-colwidths="\[75,25\]"}

::: {#tbl-panel layout-ncol="2"}
| Col1 | Col2 | Col3 |
|------|------|------|
| A    | B    | C    |
| E    | F    | G    |
| A    | G    | G    |

: First Table {#tbl-first}

| Col1 | Col2 | Col3 |
|------|------|------|
| A    | B    | C    |
| E    | F    | G    |
| A    | G    | G    |

: Second Table {#tbl-second}

Main Caption
:::

See @tbl-panel for details, especially @tbl-second.

------------------------------------------------------------------------

```{python}
#| label: tbl-planet-measures
#| tbl-cap: Planets

from IPython.display import Markdown
from tabulate import tabulate
table = [["Sun",696000,1989100000],
         ["Earth",6371,5973.6],
         ["Moon",1737,73.5],
         ["Mars",3390,641.85]]
Markdown(tabulate(
  table, 
  headers=["Planet","R (km)", "mass (x 10^29 kg)"]
))
```

+---------------+---------------+----------------------+
| Fruit         | Price         | Advantages           |
+===============+===============+======================+
| Bananas       | \$1.34        | -   built-in wrapper |
|               |               | -   bright color     |
+---------------+---------------+----------------------+
| Oranges       | \$2.10        | -   cures scurvy     |
|               |               | -   tasty            |
+---------------+---------------+----------------------+

: Sample grid table.

#### Mermaid diagram
```{mermaid}
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
  C --> D[Result one]
  C --> E[Result two]
```

#### Graphviz 

```{dot}
graph G {
  layout=neato
  run -- intr;
  intr -- runbl;
  runbl -- run;
  run -- kernel;
  kernel -- zombie;
  kernel -- sleep;
  kernel -- runmem;
  sleep -- swap;
  swap -- runswap;
  runswap -- new;
  runswap -- runmem;
  new -- runmem;
  sleep -- runmem;
}
```

