---
title: Julia
subtitle: Julia language
about:
  template: marquee
  image: ../../../images/gradientv12.jpg 
  links:
    - icon: twitter
      text: twitter
      href: https://twitter.com
    - icon: github
      text: Github
      href: https://github.com
listing:
  sort: "date desc"
  contents: "posts"
  sort-ui: false
  filter-ui: false
  categories: true
  feed: true
format:
  html:
    code-fold: true
execute: 
  cache: true

jupyter: julia-1.9

page-layout: full
---

## Einstein Summation in Julia
![](../../../images/code3.png)

Here is the newest einsum call [OMEinsum.jl](https://github.com/under-Peter/OMEinsum.jl) package in Julia. It's implement using about 20 lines of Julia code! Amazing.



## Einsum 


```{julia}


using Plots, OMEinsum, LinearAlgebra, SymEngine

plot(sin, 
     x->sin(2x), 
     0, 
     2π, 
     leg=false, 
     fill=(0,:lavender))

```
```{julia}

using OMEinsum, LinearAlgebra

OMEinsum.asarray(a::Number, ::Diagonal) = fill(a,())
ein"ij -> "(Diagonal([1,2,3]))

function OMEinsum.einsum(::OMEinsum.Sum, ixs, iy, xs::Tuple{<:Diagonal}, size_dict::Dict)
    length(iy) == 1 && return diag(xs[1])
    return sum(diag(xs[1]))
end
```
```{julia}

ein"ij -> i"(Diagonal([1,2,3]))

```

```{julia}
catty = fill(Basic(:🐱), 2, 2)
```

```{julia}
fish = fill(Basic(:🐟), 2, 3, 2)
```

```{julia}
snake = fill(Basic(:🐍), 3, 3)
```

```{julia}

medicine = ein"ij,jki,kk->k"(catty, fish, snake)
```

```{julia}
ein"ik,kj -> ij"(catty, catty) # multiply two matrices `a` and `b`

```

```{julia}


ein"->ii"(asarray(snake[1,1]), size_info=Dict('i'=>5)) # get 5 x 5 identity matrix


#link to julia ipynb
ein"->ii"(asarray(snake[1,1]), size_info=Dict('i'=>5)) # get 5 x 5 identity matrix
```
{{< embed julia_einsum.ipynb#diagonal_mat >}}

```